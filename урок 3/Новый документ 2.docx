Первый уровень.
 
⦁	Waterfall
Согласно этой методологии работа над проектом должна идти в несколько этапов, следующих друг за другом, от первого и до последнего. 
⦁	требования. 
⦁	Проектирование. 
⦁	Реализация
⦁	Проверка
⦁	Развертывание
Данная методология все еще популярна, но для того же IT подходит все меньше по ряду причин:
⦁	Очень много документов.
⦁	Подробнейший план может создать не только иллюзию безопасности, но и ложные впечатления о работе над проектом
⦁	Пользователя и заказчика полностью изолируют от процесса разработки
⦁	Все требования должны быть сразу известны.
⦁	Из-за того, что в данной методологии, тестирование происходит в самом конце, проектом могут заниматься некомпетентные специалисты, и этого никто не заметит, пока не станет поздно.
В IT все больше команд переходит на гибкие методологии по двум причинам: команды разработчиков не большие, а дедлайны можно легко подвинуть. Но для крупных проектов каскадная методология все еще актуальна, потому что:
⦁	устойчива к обновлению кадров. Благодаря очень подробному документированию каждого этапа, участники могут приходить и уходить, но на сроки работы это никак не повлияет
⦁	Дисциплинирует
⦁	Гибкая на ранних этапах. До этапа разработки можно вполне легко вносить изменения в предыдущие этапы.
⦁	Прозрачна. Заранее понятно, на каком этапе что будет происходить, поэтому становится проще прогнозировать бюджеты и набирать команду.

Где же лучше применять ?
⦁	Заказчик хорошо понимает, что хочет. У него есть проработанная концепция, которая не изменится.
⦁	Заказчик не планирует участвовать в проекте после принятия тех. задания, а полностью отдает его на аутсорс.
⦁	Заказчик хочет заранее знать точные сроки и результаты каждого этапа.

2. Agile.
Суть этой методологии в том, что работа состоит из серии коротких циклов (итерации), длительностью 2-3 недели. Каждая итерация включает в себя этапы планирования, анализа требований, проектирование, разработку, тестирование и документирование.
Преимущества данной методологии:
⦁	Команда понимает, что нужно ежедневно работать над проектом в связке с заказчиком - на каждом этапе будут новые согласования и обсуждения.
⦁	Команда готова к тому, что вводные или требования могут измениться на любом этапе проекта.
⦁	команда постоянно совершенствует проект. Его кодовую базу, дизайн-систему, саму методологию.
⦁	Команда самоорганизована и каждый может принмать решения по продукту.
Недостатки:
⦁	Команда постоянно думает о двух- или трехнедельных итерациях и спешит.
⦁	Из-за работы в формате спринтов иногда страдает качество.
⦁	При запуске проекта практически невозможно рассчитать финансовые затраты.
⦁	Постоянные правки могут влиять на конечное качество продукта
⦁	Правки демотивируют команду
Где же лучше применять ?
⦁	Стартап.
⦁	Вы не понимаете, как финально будет выглядеть продукт.
⦁	У вас нет четкого дедлайна по релизу
⦁	У вас нет ограничений в бюджете

второй уровень.

Agile - основной документ содержащий описние ценностей и принципов гибкой разработки программного обеспечения. 
основополающие принципы этого манифеста:
1 Люди и взаимодействия важнее процессов и инструментов
2 Работающий продукт важнее исчерпывающей документации
3. Сотрудничество с заказчиком важнее согласования условй контракта
4 Готовность изменения важнее следования первоначальному плану
 
Эта методиа является некой философией разработки программного обеспечения. Методология, которая основывается на цикличном методе взаимодействия. Она появилась, как альтернатива подходу к работе, движимой планами и документаций, примером которых является “водопадный” подход (waterfall)
В феврале 2001 года віпустили манифест гибкой разработки программного обеспечения. Хотя зарождение методики, по разнім источникам, началось еще в 1960-х годах, активное ускорение развития данной методологии считается с момента издания манифеста. Начиная с 2016 года про данный метод не говорит только ленивый. 
Этот метод предлагает гибкий подход к управлению проектами (итеративный подход). Гибкая методология разработки предполагает деление проекта на короткие этапы. У разработчиков поялвяется ретроспектива в конце каждой из них. Некий отзыв от клиента. В таком случае, если заказчика что-то не устроит, легко можно будет внести правки, не дожидаясь конечного продукта.

